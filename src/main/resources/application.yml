spring:
  application:
    name: shatding-springboot-mybatis
  profiles:
    active: dbshard 
    
server:
  port: 8080
  
mybatis:
  mapper-locations: classpath:mapper/*.xml
  # type-aliases-package: com.pt.sharding.test.vo
---
spring:
  profiles: tbshard
  
sharding:
  jdbc:
    datasource:
      names: ds0
      # 数据源ds0
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/dsjdbc0?nullNamePatternMatchesAll=true
        username: root
        password: 123456
    config:
      sharding:
        props:
          sql.show: true
        tables:
          t_user:  #t_user表
            key-generator-column-name: id  #主键
            actual-data-nodes: ds0.t_user${0..1}    #数据节点,均匀分布
            table-strategy:  #分表策略
              inline: #行表达式
                sharding-column: sex
                algorithm-expression: t_user${sex % 2}  #按模运算分配

---
spring:
  profiles: dbshard

sharding:
  jdbc:
    datasource:
      names: ds0,ds1
      # 数据源ds0
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/dsjdbc0?nullNamePatternMatchesAll=true
        username: root
        password: 123456
      ds1:  
        type: com.alibaba.druid.pool.DruidDataSource 
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/dsjdbc1?nullNamePatternMatchesAll=true
        username: root
        password: 123456
    config:
      sharding:
        props:
          sql.show: true
        tables:
          t_user:  #t_user表
            key-generator-column-name: id  #主键
            actual-data-nodes: ds${0..1}.t_user${0..1}    #数据节点,均匀分布
            database-strategy:   #分库策略 
              inline: #行表达式
                sharding-column: city_id        #列名称，多个列以逗号分隔
                algorithm-expression: ds${city_id % 2}    #按模运算分配
            table-strategy:  #分表策略
              inline: #行表达式
                sharding-column: sex
                algorithm-expression: t_user${sex % 2}  #按模运算分配
          t_address: #t_address表  
            key-generator-column-name: id 
            actual-data-nodes: ds${0..1}.t_address  
            database-strategy:  
              inline: 
                sharding-column: lit  
                algorithm-expression: ds${lit % 2}
            
---
spring:
  profiles: ms

sharding:
  jdbc:
    datasource:
      names: master,slave0
      # 数据源ds0
      master:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/dsjdbc0?nullNamePatternMatchesAll=true
        username: root
        password: 123456
      slave0:  
        type: com.alibaba.druid.pool.DruidDataSource 
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/dsjdbc1?nullNamePatternMatchesAll=true
        username: root
        password: 123456
    config:
      masterslave:
        props:
          sql.show: true
        load-balance-algorithm-type: round_robin
        name: ms
        master-data-source-name: master 
        slave-data-source-names: slave0
                
                
            